#README

====================== Question 1 ===================================
1.1
---------------------
Creates an integer pointer, sets the value to which it points to 3, adds 2 to this value, and prints said value.

void test1() {
    int a = 3;
    int *pa = &a;
    *pa = *pa + 2;
    printf("%d\n", *pa);
}

1.2
---------------------
Creates two integer pointers and sets the values to which they point to 2 and 3, respectively.

void test2() {
    int *a, *b;
    a = (int *) malloc(sizeof (int));
    b = (int *) malloc(sizeof (int));

    if (!(a && b)) {
        printf("Out of memory\n");
        exit(-1);
    }
    *a = 2;
    *b = 3;
    //printf("%d\n", *a);
    //printf("%d\n", *b);
    free(a);
    free(b);
}

1.3 
---------------------
Allocates an array of 1000 integers, and for i = 0, ..., 999, sets the i-th element to i.

void test3() {
    int i = 0, *a = (int *) malloc(1000 * sizeof(int));

    if (!a) {
        printf("Out of memory\n");
        exit(-1);
    }
    for (i = 0; i < 1000; i++)
        *(i + a) = i;
    // do something
    for (i = 0; i < 1000; ++i)
        printf("%d\n", *(a+i));
    
    free(a);
}

1.4 
---------------------
Creates a two-dimensional array of size 3x100, and sets element (1,1) (counting from 0) to 5.

void test4() {
    int **a;
    if ((a = (int **) malloc(3 * sizeof(int *))) == NULL) {
        printf("error\n");
        exit(-1);
    }
    for (int i = 0; i < 3; ++i) {
        if ((a[i] = (int *) malloc(1000 * sizeof(int))) == NULL) {
            printf("error\n");
            exit(-1);
        }
    }
    
    a[1][1] = 5;
    printf("%d %d %d", a[1][1], a[0][0], a[2][999]);
    for (int i = 0; i < 3; ++i) {
        free(a[i]);
    }
    free(a);
}

1.5
---------------------
Sets the value pointed to by a to an input, checks if the value pointed to by a is 0, and prints a message if it is.

void test5() {
    int *a = (int *) malloc(sizeof (int));
    scanf("%d", a);
    if (*a == 0)
        printf("Value is 0\n");
    free(a);
}

====================== Question 2 ===================================
2.1
y_1[n] will be easier and faster to parallel because the input and output are independent so that we can distribute the 
work to parallel computation, whereas y_2[n] the value of y depends on the previous y values, therefore requires serial
calculation. 

2.2


